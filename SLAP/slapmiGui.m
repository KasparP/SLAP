classdef slapmiGui < handle
    
    properties
        hSI;
        hSLAPMi;
        
        hMainFig;
        hFovAxes;
        hProjAxes;
        hProjCar;
        hProjTop;
        hProjBot;
        
        hDispFig;
        hDispAxes;
        hDispSurfs;
        
        hSfSurf;
        
        hListeners;
        hDisplayRefreshTimer;
        refreshPeriod = 0.08;
        enableDisplay = false;
        lut = [-100 100];
        sLutWhite;
        etLutWhite;
        sLutBlack;
        etLutBlack;
        pbAutoLut;
        
        displayData;
        displayFrameHistoryLength = 60;
        
        dataDecimation = 4;  %What fraction of pixels to show on screen; we have about 1000 pixels to work with
        frameDataLength;
        frameDataMap;
        decimationMap;
        
        etFrames;
        etSamplesPerClk;
        etStatus;
        etFrameNumber;
        
        stFrameRate; %static text that tells you your framerate
        stNPlanes;
        stNVolumes;
        stTotalTime;
        stDZPlanes;
        
        etRes;
        etBinFactor;
        etTiling;
        
        etFilename;
        etUser;
        
        cbLogAIs;
        logAIs;
        
        cbDo3D;
        cbBiDi;
        etAperture;
        etVolRate;
        pbZmin;
        pbZmax;
        etZmin;
        etZmax;
        etPower;
        sPower;
        
        cbLiveDisp;        
        pbInit;
        pbArm;
        pbTrig;
        pbAbort;
        pbEnd;
        
        
        pbTriggerStim;
        pbCalGalvos;
        %pbCalPiezo;
        
        pbRestoreFpga;
        
        displayAngularRange = 20;
        
        contextImageTransparency = true;
        contextImageLut;
        autoScaleSaturationFraction = [.1 .01];
        
        contextImageLuts = {[0 100] [0 100]};
        contextImageZs = [];
        contextImageRois = {};
        contextImageCDatas = {};
        contextImageChans = [];
        contextImageSurfs = [];
        contextImageProjSurfs = [];
    end
    
    properties (SetObservable)
        contextImageDisplayZ = 0;
        contextImageDisplayProjectionRange = 0;
        contextImageChan = 1;
        contextImageDisplaySideProjectionDim = 1;
        contextImageLutBlack = 0;
        contextImageLutWhite = 100;
        lutWhite = -1000;
        lutBlack = 1000;
        
        zmin;
        zmax;
        slices;
    end
    
    properties (Hidden)
        imageBuffer;
        tfMap = containers.Map({true false}, {'on' 'off'});
    end
    
    methods
        function obj = slapmiGui(sObj)
            obj.hSLAPMi = sObj;
            obj.hSLAPMi.hGui = obj;
            obj.hSI = sObj.hSI;
            
            %% Main figure
            set(0,'units','points');
            scrsz = get(0,'ScreenSize');
            pw = 354;
            cph = 320;
            p = [pw cph];
            p = [(scrsz(3)-p(1))/2 (scrsz(4)-p(2))/2 p(1) p(2)];
            
            obj.hMainFig = figure('Units','points','Color',[0.941176470588235 0.941176470588235 0.941176470588235],'MenuBar','none','Name','SLAPMi',...
                'NumberTitle','off','Position',p,'Resize','off','Visible','off','CloseRequestFcn',@(varargin)obj.exit,'Colormap',repmat(linspace(0,1,255)',1,3));
            
            %Figure Icon
            warning('off','MATLAB:HandleGraphics:ObsoletedProperty:JavaFrame');
            jframe=get(obj.hMainFig,'javaframe');
            I = imread([fileparts(which('slapmi')) filesep 'slapmiIcon.png']); 
            javaImage = im2java(I); 
            jIcon=javax.swing.ImageIcon(javaImage);
            jframe.setFigureIcon(jIcon);
            
%             %% fov panel
%             ph = 413;
%             fovPanel = uipanel('Parent',obj.hMainFig,'Units','pixels','Title','Scanfield','Clipping','on','Position',[12 12 544 ph],'Tag','uipanel1');
%             
%             obj.hFovAxes = axes('Parent',fovPanel,'Units','points','Position',[8 30 264 264],'YDir','reverse','XTick',[],'YTick',[],...
%                 'YTickLabelMode','manual','XTickLabelMode','manual','XTickLabel',[],'YTickLabel',[]);
%             set(obj.hFovAxes, 'DataAspectRatio',[1 1 1],'PlotBoxAspectRatioMode','auto','color','k','box','on',...
%                 'DataAspectRatioMode','auto','XLim',[-.5 .5]*obj.displayAngularRange,'YLim',[-.5 .5]*obj.displayAngularRange,'ALim',[0 1]);
%             
%             obj.hSfSurf = patch(ones(8,1),ones(8,1),'g','Parent',obj.hFovAxes,'FaceAlpha',0.2,...
%                 'EdgeColor','g','LineWidth',2,'ButtonDownFcn',@(varargin)obj.sfCpFunc(),'Hittest','on');
%             obj.updateRect();
%             
%             obj.hListeners = obj.hSLAPMi.addlistener('scanCenterPoint', 'PostSet', @obj.updateRect);
%             obj.hListeners(end+1) = obj.hSLAPMi.addlistener('tiling', 'PostSet', @obj.updateRect);
%             
%             uicontrol(...
%                 'Units','Points',...
%                 'Parent',fovPanel,...
%                 'Callback',@obj.copySiImage,...
%                 'Position',[8 5 64 20],...
%                 'String','Copy SI Image',...
%                 'Enable',obj.tfMap(most.idioms.isValidObj(obj.hSI)));
%             
%             uicontrol(...
%                 'Units','Points',...
%                 'Parent',fovPanel,...
%                 'Callback',@obj.loadTiff,...
%                 'Position',[76 5 50 20],...
%                 'String','Load Tiff...');
%             
%             most.gui.uicontrol(...
%                 'Units','Points',...
%                 'Parent',fovPanel,...
%                 'Style','popupmenu',...
%                 'Position',[130 5 56 18],...
%                 'String',{'Channel 1' 'Channel 2'},...
%                 'Bindings',{obj 'contextImageChan' 'value'});
%             
%             
%             
%             obj.hProjAxes = axes('Parent',fovPanel,'Units','points','Position',[280 30 48 264],'YDir','reverse','XTick',[],'YTick',[],...
%                 'YTickLabelMode','manual','XTickLabelMode','manual','XTickLabel',[],'YTickLabel',[]);
%             set(obj.hProjAxes, 'DataAspectRatio',[1 1 1],'PlotBoxAspectRatioMode','auto','color','k','box','on',...
%                 'DataAspectRatioMode','auto','XLim',[0 1],'YLim',[0 1],'ALim',[0 1]);
%             
%             obj.hProjCar = surface([0 1; 0 1], [.4 .4; .6 .6], ones(2),'parent',obj.hProjAxes,'facecolor','none','edgecolor',[0.9412 0.5098 0.2353],'linewidth',2,'ButtonDownFcn',@(varargin)obj.manipProj([true true]));
%             obj.hProjTop = line(.5, .38, 1,'parent',obj.hProjAxes,'MarkerFaceColor',[0.9412 0.5098 0.2353],'marker','v','markersize',10,'MarkerEdgeColor','none','ButtonDownFcn',@(varargin)obj.manipProj([true false]));
%             obj.hProjBot = line(.5, .62, 1,'parent',obj.hProjAxes,'MarkerFaceColor',[0.9412 0.5098 0.2353],'marker','^','markersize',10,'MarkerEdgeColor','none','ButtonDownFcn',@(varargin)obj.manipProj([false true]));
%             obj.updateSideProjection();
%             
%             most.gui.uicontrol(...
%                 'Units','Points',...
%                 'Parent',fovPanel,...
%                 'Style','togglebutton',...
%                 'Position',[279.75 5 24 20],...
%                 'String','XZ',...
%                 'Bindings',{obj 'contextImageDisplaySideProjectionDim' 'match' 1});
%             most.gui.uicontrol(...
%                 'Units','Points',...
%                 'Parent',fovPanel,...
%                 'Style','togglebutton',...
%                 'Position',[303.75 5 24 20],...
%                 'String','YZ',...
%                 'Bindings',{obj 'contextImageDisplaySideProjectionDim' 'match' 2});
%             
%             
%             ctph = 120;
%             contrastPanel = uipanel('Parent',fovPanel,'Units','pixels','Title','Contrast','Clipping','on','Position',[449 281 85 ctph]);
%             
%             uicontrol(...
%                 'Units','pixels',...
%                 'Parent',contrastPanel,...
%                 'Style','text',...
%                 'Position',[6 ctph-34 28 14],...
%                 'String','Black')
%             most.gui.uicontrol(...
%                 'Units','pixels',...
%                 'Parent',contrastPanel,...
%                 'Style','edit',...
%                 'Position',[38 ctph-36 38 18],...
%                 'Bindings',{obj 'contextImageLutBlack' 'Value'});
%             most.gui.uicontrol(...
%                 'Units','pixels',...
%                 'Parent',contrastPanel,...
%                 'Style','slider',...
%                 'Position',[6 ctph-51 70 16],...
%                 'Min',-820,'Max',8191,...
%                 'Bindings',{obj 'contextImageLutBlack' 'Value'});
%             
%             uicontrol(...
%                 'Units','pixels',...
%                 'Parent',contrastPanel,...
%                 'Style','text',...
%                 'Position',[6 ctph-73 30 14],...
%                 'String','White')
%             most.gui.uicontrol(...
%                 'Units','pixels',...
%                 'Parent',contrastPanel,...
%                 'Style','edit',...
%                 'Position',[38 ctph-75 38 18],...
%                 'Bindings',{obj 'contextImageLutWhite' 'Value'});
%             most.gui.uicontrol(...
%                 'Units','pixels',...
%                 'Parent',contrastPanel,...
%                 'Style','slider',...
%                 'Position',[6 ctph-90 70 16],...
%                 'Min',-820,'Max',8191,...
%                 'Bindings',{obj 'contextImageLutWhite' 'Value'});
%             
%             uicontrol(...
%                 'Units','pixels',...
%                 'Parent',contrastPanel,...
%                 'Position',[17 ctph-115 50 21],...
%                 'callback',@obj.autoContextImageContrast,...
%                 'String','Auto');
%             
%             
%             ctph = 88;
%             ctxImPanel = uipanel('Parent',fovPanel,'Units','pixels','Title','Stack Stats','Clipping','on','Position',[449 ph-255 85 ctph]);
%             uicontrol(...
%                 'Units','pixels',...
%                 'Parent',ctxImPanel,...
%                 'Style','text',...
%                 'horizontalalignment','left',...
%                 'Position',[6 ctph-35 30 14],...
%                 'String','Z Min')
%             most.gui.uicontrol(...
%                 'Units','pixels',...
%                 'Parent',ctxImPanel,...
%                 'Style','edit',...
%                 'Position',[40 ctph-37 36 19],...
%                 'Enable','inactive',...
%                 'BackgroundColor',.95*ones(1,3),...
%                 'Bindings',{obj 'zmin' 'Value'});
%             
%             uicontrol(...
%                 'Units','pixels',...
%                 'Parent',ctxImPanel,...
%                 'Style','text',...
%                 'horizontalalignment','left',...
%                 'Position',[6 ctph-58 32 14],...
%                 'String','Z Max')
%             most.gui.uicontrol(...
%                 'Units','pixels',...
%                 'Parent',ctxImPanel,...
%                 'Style','edit',...
%                 'Position',[40 ctph-60 36 19],...
%                 'Enable','inactive',...
%                 'BackgroundColor',.95*ones(1,3),...
%                 'Bindings',{obj 'zmax' 'Value'});
%             
%             uicontrol(...
%                 'Units','pixels',...
%                 'Parent',ctxImPanel,...
%                 'Style','text',...
%                 'horizontalalignment','left',...
%                 'Position',[6 ctph-81 32 14],...
%                 'String','Slices')
%             most.gui.uicontrol(...
%                 'Units','pixels',...
%                 'Parent',ctxImPanel,...
%                 'Style','edit',...
%                 'Position',[40 ctph-83 36 19],...
%                 'Enable','inactive',...
%                 'BackgroundColor',.95*ones(1,3),...
%                 'Bindings',{obj 'slices' 'Value'});
%             
%             
%             ctph = 65;
%             ctxImPanel = uipanel('Parent',fovPanel,'Units','pixels','Title','Projection','Clipping','on','Position',[449 ph-340 85 ctph]);
%             
%             uicontrol(...
%                 'Units','pixels',...
%                 'Parent',ctxImPanel,...
%                 'Style','text',...
%                 'horizontalalignment','left',...
%                 'Position',[6 ctph-35 30 14],...
%                 'String','Z')
%             most.gui.uicontrol(...
%                 'Units','pixels',...
%                 'Parent',ctxImPanel,...
%                 'Style','edit',...
%                 'Position',[40 ctph-37 36 19],...
%                 'Bindings',{obj 'contextImageDisplayZ' 'Value'});
%             
%             uicontrol(...
%                 'Units','pixels',...
%                 'Parent',ctxImPanel,...
%                 'Style','text',...
%                 'horizontalalignment','left',...
%                 'Position',[6 ctph-58 33 14],...
%                 'String','Range')
%             most.gui.uicontrol(...
%                 'Units','pixels',...
%                 'Parent',ctxImPanel,...
%                 'Style','edit',...
%                 'Position',[40 ctph-60 36 19],...
%                 'Bindings',{obj 'contextImageDisplayProjectionRange' 'Value'});
            
            %% main panel buttons
            
            x0 = 10; %x offset of main panel buttons
            obj.pbInit = uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Callback',@(varargin)obj.hSLAPMi.initAcq(),...
                'Position',[x0 8 60 20],...
                'String','Initialize Acq',...
                'Tag','pbInit');
            
            obj.pbArm = uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Callback',@(varargin)obj.hSLAPMi.armAcq(),...
                'Position',[x0+64 8 45 20],...
                'String','Arm Acq',...
                'Tag','pbArm');
            
            obj.pbTrig = uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Callback',@(varargin)obj.hSLAPMi.triggerAcq(),...
                'Position',[x0+117 8 55 20],...
                'String','Trigger Acq',...
                'Tag','pbTrig');
            
            obj.pbAbort = uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Callback',@(varargin)obj.hSLAPMi.abortAcq(),...
                'Position',[x0+172 8 55 20],...
                'String','Abort Acq',...
                'Tag','pbAbort');
            
            obj.pbEnd = uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Callback',@(varargin)obj.hSLAPMi.endAcq(),...
                'Position',[x0+231 8 60 20],...
                'String','End Acq Mode',...
                'Tag','pbEnd');

           obj.pbCalGalvos = uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Callback',@(varargin)(SLAPmi_cal_Galvos3(obj.hSLAPMi)),...
                'Position',[x0+166 90 70 20],...
                'String','Calibrate Galvos',...
                'Tag','pbCalGalvos');
            
           obj.pbTriggerStim = uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Callback',@(varargin)(obj.triggerStim()),...
                'Position',[x0+166 115 70 20],...
                'String','Stimulus',...
                'Tag','pbTriggerStim');
            
            
            
             uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Position', [x0+275 108 50 20],...
                'HorizontalAlignment','left',...
                'String','Log AIs:',...
                'Style','text');
            nAIButtons = 4;
            for ai = 1:nAIButtons
                obj.cbLogAIs{ai} = uicontrol(...
                    'Units','Points',...
                    'Parent',obj.hMainFig,...
                    'Position', [x0+222+ai*24 99 20 12],...
                    'HorizontalAlignment','left',...
                    'String',int2str(ai),...
                    'Style','checkbox',...
                    'Tag','cbDo3D',...
                    'callback',@(src,val)(updateLogAIs(obj)));
            end
            

            
            
            %% do3D
            do3Dpos = [x0 60 0 0]; %bottom left corner of do3Dpanel
            
            obj.cbDo3D = uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Position', do3Dpos + [0 100 60 15],...
                'HorizontalAlignment','left',...
                'String','Do 3D',...
                'Style','checkbox',...
                'Tag','cbDo3D',...
                'callback',@(src, ~)(updateDo3D(obj,src.Value)));
           %obj.hListeners(end+1) = obj.hSLAPMi.addlistener('do3D', 'PostSet', @(varargin)(updateDo3D(obj)));
            
%            obj.cbCalPiezo = uicontrol(...
%                 'Units','Points',...
%                 'Parent',obj.hMainFig,...
%                 'Position', do3Dpos + [75 100 60 15],...
%                 'HorizontalAlignment','left',...
%                 'String','Tune Piezo',...
%                 'Style','checkbox',...
%                 'Tag','cbDo3D',...
%                 'callback',@(src, ~)(obj.updateProp('tunePiezo', src.Value)));
%            obj.hListeners(end+1) = obj.hSLAPMi.addlistener('tunePiezo', 'PostSet', @(varargin)(set(obj.cbCalPiezo, 'Value', obj.hSLAPMi.tunePiezo)));   
           
           uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Position', do3Dpos + [0 80 100 12],...
                'HorizontalAlignment','left',...
                'String','Volume Rate (Hz)',...
                'Style','text');
            
            obj.etVolRate = uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Position',do3Dpos + [100 80 30 15],...
                'HorizontalAlignment','left',...
                'String',num2str(1/obj.hSLAPMi.volumePeriod,5),...
                'Callback', @(varargin)(updatePiezo(obj)),...%@(src,~)obj.updateProp('volumePeriod', max(0.02, 1/str2double(get(src,'string')))),...
                'Style','edit',...
                'Tag','etVolRate');
            obj.hListeners = obj.hSLAPMi.addlistener('volumePeriod', 'PostSet',@(varargin)set(obj.etVolRate,'string',num2str(1/obj.hSLAPMi.volumePeriod, 5)));
            
            obj.cbBiDi = uicontrol(...
                'Units','Points',...
                'Style', 'checkbox', ...
                'Parent',obj.hMainFig,...
                'Position',do3Dpos + [135 80 30 15],...
                'HorizontalAlignment','left',...
                'String','BiDi',...
                'Callback', @(src,~)obj.updateProp('ZBiDi', get(src,'Value')),...
                'Tag','cbBiDi');
            obj.hListeners(end+1) = obj.hSLAPMi.addlistener('ZBiDi', 'PostSet', @(varargin)(set(obj.cbBiDi, 'Value', obj.hSLAPMi.ZBiDi)));
            
            obj.pbZmin = uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Callback',@(varargin)(SLAPmi_setZmin(obj)),...
                'Position',do3Dpos +[15 50 45 20],...
                'String','Z-',...
                'Tag','pbZmin');
            
            obj.etZmin = uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                 'Position',do3Dpos + [15 30 45 15],...
                'Style','edit',...
                'String','0',...
                'Callback',@(varargin)(updatePiezo(obj)),... %@(src,~)obj.updateProp('Zmin', min(400, max(0,str2double(get(src,'string'))))),...
                'Tag','etZmin');   %
            
            obj.hListeners(end+1) = obj.hSLAPMi.addlistener('Zmin', 'PostSet',@(varargin)set(obj.etZmin,'string',num2str(obj.hSLAPMi.Zmin, 4)));

            
            obj.pbZmax = uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Position',do3Dpos + [70 50 45 20],...
                'String','Z+',...
                'Tag','pbZmax');  %'Callback',@(varargin)(SLAPmi_setZmax([],obj)),...
            
            obj.etZmax = uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Position',do3Dpos + [70 30 45 15],...
                'Style','edit',...
                'String','0',...
                'Callback',@(varargin)(updatePiezo(obj)),...% @(src,~)obj.updateProp('Zmax', max(0, min(400,str2double(get(src,'string'))))),...
                'Tag','etZmax');    %'Callback',@(src,~)obj.updateProp('Zmax', str2double(get(src,'string'))),...
            obj.hListeners(end+1) = obj.hSLAPMi.addlistener('Zmax', 'PostSet',@(varargin)set(obj.etZmax,'string',num2str(obj.hSLAPMi.Zmax, 4)));
            
            obj.stNPlanes = uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Position', do3Dpos + [0 6 60 12],...
                'HorizontalAlignment','left',...
                'Style','text',...
                'String',['# Planes: ' int2str(obj.hSLAPMi.volumePeriod/obj.hSLAPMi.framePeriod)]);
            obj.hListeners(end+1) = obj.hSLAPMi.addlistener('nPlanes', 'PostSet',@(varargin)set(obj.stNPlanes,'string',['# Planes: ' int2str(obj.hSLAPMi.nPlanes)]));
            
            obj.stNVolumes = uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Position', do3Dpos + [70 6 90 12],...
                'HorizontalAlignment','left',...
                'Style','text',...
                'String',['# Volumes: ' num2str(obj.hSLAPMi.nVolumes, 3)]);
            obj.hListeners(end+1) = obj.hSLAPMi.addlistener('nVolumes', 'PostSet',@(varargin)set(obj.stNVolumes,'string',['# Volumes: ' num2str(obj.hSLAPMi.nVolumes, 3)]));
            
            obj.stDZPlanes = uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Position',do3Dpos + [140 6 50 12],...
                'HorizontalAlignment','left',...
                'Style','text',...
                'String','dZ: '); 
            obj.hListeners(end+1) = obj.hSLAPMi.addlistener('dZ', 'PostSet',@(varargin)set(obj.stDZPlanes,'string',['dZ: ' num2str(obj.hSLAPMi.dZ,4)]));
            
            updateDo3D(obj); %set the enable state correctly
            
            %% main panel settings
            uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Position',[x0 290 80 12],...
                'HorizontalAlignment','left',...
                'String','Frames to collect:',...
                'Style','text');
            
            obj.etFrames = uicontrol(...
                'Parent',obj.hMainFig,...
                'Units','Points',...
                'BackgroundColor',[1 1 1],...
                'HorizontalAlignment','left',...
                'Position',[x0+100 290 30 15],...
                'string',num2str(obj.hSLAPMi.framesToCollect),...
                'Style','edit',...
                'Callback',@(src,~)obj.updateProp('framesToCollect', str2double(get(src,'string'))),...
                'Tag','etFrames');
            obj.hListeners(end+1) = obj.hSLAPMi.addlistener('framesToCollect', 'PostSet', @(varargin)set(obj.etFrames,'string',num2str(obj.hSLAPMi.framesToCollect)));
            
            obj.stTotalTime = uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Position', [x0+151 290 100 12],...
                'HorizontalAlignment','left',...
                'Style','text',...
                'String',['Acq Time: ' int2str(obj.hSLAPMi.acqTime)]);
            obj.hListeners(end+1) = obj.hSLAPMi.addlistener('acqTime', 'PostSet',@(varargin)set(obj.stTotalTime,'string',['Time: ' num2str(obj.hSLAPMi.acqTime, 3) ' seconds']));

            
%             uicontrol(...
%                 'Units','Points',...
%                 'Parent',obj.hMainFig,...
%                 'Position',[424 270 95 12],...
%                 'HorizontalAlignment','left',...
%                 'String','Samples per Laser Clock:',...
%                 'Style','text');
%             obj.etSamplesPerClk = uicontrol(...
%                 'Parent',obj.hMainFig,...
%                 'Units','Points',...
%                 'BackgroundColor',[1 1 1],...
%                 'HorizontalAlignment','left',...
%                 'Position',[524 270 30 15],...
%                 'string',num2str(obj.hSLAPMi.samplesPerLaserClk),...
%                 'Callback',@(src,~)obj.updateProp('samplesPerLaserClk', 2*round(str2double(get(src,'string'))/2)),...
%                 'Style','edit',...
%                 'Tag','etSamps');
%             obj.hListeners(end+1) = obj.hSLAPMi.addlistener('samplesPerLaserClk', 'PostSet', @(varargin)set(obj.etSamplesPerClk,'string',num2str(obj.hSLAPMi.samplesPerLaserClk)));   
            
            uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Position',[x0 270 95 12],...
                'HorizontalAlignment','left',...
                'String','Resolution',...
                'Style','text');
            
            obj.etRes = uicontrol(...
                'Parent',obj.hMainFig,...
                'Units','Points',...
                'BackgroundColor',[1 1 1],...
                'HorizontalAlignment','left',...
                'Position',[x0+100 270 30 15],...
                'string',num2str(obj.hSLAPMi.res),...
                'Callback',@(src,~)obj.updateProp('res', max(400, round(str2double(get(src,'string'))))),...
                'Style','edit',...
                'Tag','etRes');
            obj.hListeners(end+1) = obj.hSLAPMi.addlistener('res', 'PostSet', @(varargin)set(obj.etRes,'string',num2str(obj.hSLAPMi.res)));
            
            uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Position',[x0 250 95 12],...
                'HorizontalAlignment','left',...
                'String','Bin Factor',...
                'Style','text');
            
            obj.etBinFactor = uicontrol(...
                'Parent',obj.hMainFig,...
                'Units','Points',...
                'BackgroundColor',[1 1 1],...
                'HorizontalAlignment','left',...
                'Position',[x0+100 250 30 15],...
                'string',num2str(obj.hSLAPMi.binFactor),...
                'Callback',@(src,~)obj.updateProp('binFactor', max(1, round(str2double(get(src,'string'))))),...
                'Style','edit',...
                'Tag','etBinFactor');
            obj.hListeners(end+1) = obj.hSLAPMi.addlistener('binFactor', 'PostSet', @(varargin)set(obj.etBinFactor,'string',num2str(obj.hSLAPMi.binFactor)));
            
            uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Position',[x0 230 95 12],...
                'HorizontalAlignment','left',...
                'String','Tiling',...
                'Style','text');
            obj.etTiling = uicontrol(...
                'Parent',obj.hMainFig,...
                'Units','Points',...
                'BackgroundColor',[1 1 1],...
                'HorizontalAlignment','left',...
                'Position',[x0+100 230 30 15],...
                'string',num2str(obj.hSLAPMi.tiling),...
                'Callback',@(src,~)obj.updateProp('tiling', max(1, round(str2double(get(src,'string'))))),...
                'Style','edit',...
                'enable', 'off',...
                'Tag','etTiling');
            obj.hListeners(end+1) = obj.hSLAPMi.addlistener('tiling', 'PostSet', @(varargin)set(obj.etTiling,'string',num2str(obj.hSLAPMi.tiling)));
            

            uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Position',[x0 210 95 12],...
                'HorizontalAlignment','left',...
                'String','Filename',...
                'Style','text');
            
            obj.etFilename = uicontrol(...
                'Parent',obj.hMainFig,...
                'Units','Points',...
                'BackgroundColor',[1 1 1],...
                'HorizontalAlignment','left',...
                'Position',[x0+50 210 80 15],...
                'string',obj.hSLAPMi.fileNameStem,...
                'Callback',@(src,~)obj.updateProp('fileNameStem', get(src,'string')),...
                'Style','edit',...
                'Tag','etFilename');
            obj.hListeners(end+1) = obj.hSLAPMi.addlistener('fileNameStem', 'PostSet', @(varargin)set(obj.etFilename,'string',obj.hSLAPMi.fileNameStem));

             uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Position',[x0 190 95 12],...
                'HorizontalAlignment','left',...
                'String','User Dir',...
                'Style','text');
            obj.etUser = uicontrol(...
                'Parent',obj.hMainFig,...
                'Units','Points',...
                'BackgroundColor',[1 1 1],...
                'HorizontalAlignment','left',...
                'Position',[x0+50 190 80 15],...
                'string',obj.hSLAPMi.user,...
                'Callback',@(src,~)obj.updateProp('user', get(src,'string')),...
                'Style','edit',...
                'Tag','etFilename');
            obj.hListeners(end+1) = obj.hSLAPMi.addlistener('fileNameStem', 'PostSet', @(varargin)set(obj.etUser,'string',obj.hSLAPMi.user));
            
                        uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Position',[x0+151 190 30 12],...
                'HorizontalAlignment','left',...
                'String','Power',...
                'Style','text');
            
            obj.etPower = uicontrol(...
                'Parent',obj.hMainFig,...
                'Units','Points',...
                'BackgroundColor',[1 1 1],...
                'HorizontalAlignment','left',...
                'Position',[x0+261 190 25 15],...
                'string',num2str(obj.hSLAPMi.power),...
                'Callback',@(src,~)obj.updateProp('power', max(0,min(1,round(str2double(get(src,'string')),2)))),...
                'Style','edit',...
                'Tag','etPower');
            
            
            
            obj.hListeners(end+1) = obj.hSLAPMi.addlistener('power', 'PostSet', @(varargin)set(obj.etPower,'string',num2str(obj.hSLAPMi.power, 2)));
            obj.sPower = uicontrol(...
                'Parent',obj.hMainFig,...
                'Units','Points',...
                'BackgroundColor',[1 1 1],...
                'HorizontalAlignment','left',...
                'Position',[x0+190 190 66 15],...
                'string',num2str(obj.hSLAPMi.power),...
                'Callback',@(src,~)(obj.updateProp('power', max(0,min(1,round(get(src,'Value'),2))))),...
                'Style','slider',...
                'Tag','sPower');
            obj.hListeners(end+1) = obj.hSLAPMi.addlistener('power', 'PostSet', @(varargin)set(obj.sPower,'value',obj.hSLAPMi.power));
            obj.hSLAPMi.power = 0;
            
                         uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Position',[x0+151 210 60 12],...
                'HorizontalAlignment','left',...
                'String','Scan Length',...
                'Style','text');
            obj.etAperture = uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Position', [x0+201 210 20 15],...
                'HorizontalAlignment','left',...
                'String',num2str(obj.hSLAPMi.aperture),...
                'Style','edit',...
                'Tag','etAperture',...
                'callback',@(src, ~)(updateAperture(obj,str2double(src.String))));
            obj.hListeners(end+1) = obj.hSLAPMi.addlistener('aperture', 'PostSet', @(varargin)set(obj.etAperture,'String',num2str(obj.hSLAPMi.aperture)));
            
            obj.stFrameRate = uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Position',[x0 54 95 12],...
                'HorizontalAlignment','left',...
                'String',['Framerate: ' num2str(1/obj.hSLAPMi.framePeriod,5) ' Hz'],...
                'Style','text');
            obj.hListeners(end+1) = obj.hSLAPMi.addlistener('framePeriod', 'PostSet', @(varargin)set(obj.stFrameRate,'string',['Framerate: ' num2str(1/obj.hSLAPMi.framePeriod, 5) ' Hz']));            
 
            %Sanity checking and framerate update:
            obj.hListeners(end+1) = obj.hSLAPMi.addlistener({'aperture', 'binFactor', 'res', 'laser', 'tiling', 'volumePeriod', 'Zmin', 'Zmax', 'framesToCollect'}, 'PostSet', @(varargin)(SLAPmi_timing(obj.hSLAPMi)));
            
            %% status display
            uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Position',[x0 34 80 12],...
                'HorizontalAlignment','left',...
                'String','Status:',...
                'Style','text');
            
            obj.etStatus = uicontrol(...
                'Parent',obj.hMainFig,...
                'Units','Points',...
                'HorizontalAlignment','left',...
                'Position',[x0+30 34 100 15],...
                'Style','edit',...
                'String','Idle',...
                'enable','inactive',...
                'Tag','etStatus');
            obj.hListeners(end+1) = obj.hSLAPMi.addlistener('status', 'PostSet', @(varargin)obj.updateStatus);
            
            uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Position',[x0+150 34 95 12],...
                'HorizontalAlignment','left',...
                'String', 'Idle',...
                'String','Frame Number:',...
                'Style','text');
            
            obj.etFrameNumber = uicontrol(...
                'Parent',obj.hMainFig,...
                'Units','Points',...
                'HorizontalAlignment','left',...
                'Position',[x0+210 34 30 15],...
                'String', '0',...
                'enable','inactive',...
                'Style','edit',...
                'Tag','etFrameNumber');
            obj.hListeners(end+1) = obj.hSLAPMi.addlistener('latestFrameTag', 'PostSet', @(varargin)set(obj.etFrameNumber,'string',num2str(obj.hSLAPMi.latestFrameTag.frameNumber)));
            
            obj.cbLiveDisp = uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Position',[x0+260 36 100 12],...
                'HorizontalAlignment','left',...
                'String', 'Idle',...
                'String','Live Display',...
                'Style','checkbox',...
                'Tag','cbLiveDisp',...
                'callback',@(src,~)obj.updateGProp('enableDisplay',src.Value));
            
            cbLogData = uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Position',[x0+260 56 100 12],...
                'HorizontalAlignment','left',...
                'String', 'Idle',...
                'String','Log Data',...
                'Style','checkbox',...
                'Tag','cbLogData',...
                'callback',@(src,~)obj.updateProp('logData',src.Value));
            obj.hListeners(end+1) = obj.hSLAPMi.addlistener('logData', 'PostSet', @(varargin)set(cbLogData,'value',obj.hSLAPMi.logData));
            
            obj.pbRestoreFpga = uicontrol(...
                'Units','Points',...
                'Parent',obj.hMainFig,...
                'Position',[pw-94 cph-24 90 20],...
                'HorizontalAlignment','left',...
                'String', 'Idle',...
                'String','Restore SI FPGA',...
                'callback',@obj.pbRestoreFpgaCb);
            obj.hListeners(end+1) = obj.hSLAPMi.addlistener('siFpgaRunning', 'PostSet', @obj.updateFpgaButton);
            obj.updateFpgaButton();
            
            %% Display timer
            obj.hDisplayRefreshTimer = timer();
            obj.hDisplayRefreshTimer.TimerFcn = @(varargin)obj.updateDisplay();
            obj.hDisplayRefreshTimer.ExecutionMode = 'fixedSpacing';
            obj.hDisplayRefreshTimer.Period = obj.refreshPeriod;
            obj.hDisplayRefreshTimer.Name = 'SLAPMi GUI display refresh timer';
            
            %% Display window
            set(0,'units','points');
            scrsz = get(0,'ScreenSize');
            p = [scrsz(3), round(scrsz(4)/2.3)];
            p = [(scrsz(3)-p(1))/2 (scrsz(4)-p(2))-20 p(1) p(2)];
            
            
            obj.hDispFig = figure(...
                'Units','points',...
                'Color',[0.941176470588235 0.941176470588235 0.941176470588235],...
                'MenuBar','none',...
                'Name','SLAPMi Display',...
                'NumberTitle','off',...
                'Position',p,...
                'Resize','on',...
                'Visible','off',...
                'CloseRequestFcn',@obj.closeDisp);
            
                obj.hDispAxes{1} = axes('Parent',obj.hDispFig,'Units','normalized','Position',[.01 .075 .98 .95],'YDir','reverse');
                obj.displayData{1}.vals = [];
                obj.displayData{1}.frames = [];
                obj.hDispSurfs{1} = surface([0 1], [0 1], zeros(2),'Parent',obj.hDispAxes{1},'FaceColor','texturemap',...
                    'CData',zeros(2,2,3,'uint8'),'EdgeColor','k','FaceLighting','none','FaceAlpha',1);
                xlim(obj.hDispAxes{1}, [0 1]);
                ylim(obj.hDispAxes{1}, [0 1]);
                set(obj.hDispAxes{1},'XTick',[],'YTick',[],'YTickLabelMode','manual','XTickLabelMode','manual','XTickLabel',[],'YTickLabel',[]);
                line([0.25 0.25 nan 0.5 0.5 nan 0.75 0.75], [0 1 nan 0 1 nan 0 1],'Parent',obj.hDispAxes{1},'Color','r');
            
                
                most.gui.uicontrol(...
                    'Units','pixels',...
                    'Parent',obj.hDispFig,...
                    'Style','text',...
                    'Position',[250 17 70 16],...
                    'String', 'White Level');
                most.gui.uicontrol(...
                    'Units','pixels',...
                    'Parent',obj.hDispFig,...
                    'Style','text',...
                    'Position',[50 17 170 16],...
                    'String', 'Black Level');
                obj.sLutWhite =  most.gui.uicontrol(...
                    'Units','pixels',...
                    'Parent',obj.hDispFig,...
                    'Style','slider',...
                    'Position',[220 1 170 16],...
                    'Min',intmin('int16'),'Max', intmax('int16'),...
                    'SliderStep', [1 20]./(2^16-1),...
                    'Bindings',{obj 'lutWhite' 'Value'});
                obj.etLutWhite =  most.gui.uicontrol(...
                    'Units','pixels',...
                    'Parent',obj.hDispFig,...
                    'Style','edit',...
                    'Position',[395 1 40 16],...
                    'Bindings',{obj 'lutWhite' 'Value'});
               obj.sLutBlack =  most.gui.uicontrol(...
                    'Units','pixels',...
                    'Parent',obj.hDispFig,...
                    'Style','slider',...
                    'Position',[1 1 170 16],...
                    'Min',intmin('int16'),'Max', intmax('int16'),...
                    'SliderStep', [1 20]./(2^16-1),...
                    'Bindings',{obj 'lutBlack' 'Value'});
               obj.etLutBlack =  most.gui.uicontrol(...
                    'Units','pixels',...
                    'Parent',obj.hDispFig,...
                    'Style','edit',...
                    'Position',[170 1 40 16],...
                    'Bindings',{obj 'lutBlack' 'Value'});
               obj.pbAutoLut =  most.gui.uicontrol(...
                    'Units','pixels',...
                    'Parent',obj.hDispFig,...
                    'Style','pushbutton',...
                    'String', 'Auto',...
                    'Position',[440 1 50 25],...
                    'Callback', @obj.autoLut);
                
            obj.hListeners(end+1) = obj.addlistener({'lutWhite', 'lutBlack'}, 'PostSet', @(varargin)(updateLut(obj)));
            
            obj.updateStatus();
            
            %% show
            obj.hMainFig.Visible = 'on';
        end
        
        function delete(obj)
            delete(obj.hListeners);
            delete(obj.hMainFig);
            delete(obj.hDispFig);
        end
        
        function exit(obj,force)
            if nargin < 2
                force = false;
            end
            
            if force || strcmp(questdlg('Exit SLAPMi?', 'SLAPMi', 'Yes', 'No', 'No'), 'Yes')
                sObj = obj.hSLAPMi;
                delete(obj);
                most.idioms.safeDeleteObj(sObj);
                evalin('base','clear hSLAPMi gSLAPMi');
            end
        end
    end
    
    %% Prop access
    methods
        function set.contextImageChan(obj,v)
            obj.contextImageChan = v;
            obj.updateSfDisplay();
            obj.updateSideProjection();
        end
        
        function set.enableDisplay(obj,v)
            if v
                obj.hDispFig.Visible = 'on';
            else
                obj.hDispFig.Visible = 'off';
            end
            obj.enableDisplay = v;
            obj.cbLiveDisp.Value = v;
        end
        
        function set.lut(obj,v)
            obj.lut = v;
            obj.redrawDisplay();
        end
        
        function set.contextImageLut(obj,v)
            [tf, chanIdx] = ismember(obj.contextImageChan,obj.contextImageChans);
            if tf
                obj.contextImageLuts{chanIdx} = int32(v);
                obj.updateSfDisplay();
                obj.updateSideProjection();
            end
            
            % trigger gui update
            obj.contextImageLutBlack = nan;
            obj.contextImageLutWhite = nan;
        end
        
        function v = get.contextImageLut(obj)
            [tf, chanIdx] = ismember(obj.contextImageChan,obj.contextImageChans);
            if tf
                v = obj.contextImageLuts{chanIdx};
            else
                v = [0 100];
            end
        end
        
        function set.contextImageLutBlack(obj,v)
            if isnan(v)
                obj.contextImageLutBlack = obj.contextImageLut(1);
            else
                obj.contextImageLut(1) = v;
            end
        end
        
        function set.contextImageLutWhite(obj,v)
            if isnan(v)
                obj.contextImageLutWhite = obj.contextImageLut(2);
            else
                obj.contextImageLut(2) = v;
            end
        end
        
        function set.contextImageDisplayZ(obj,v)
            obj.contextImageDisplayZ = v;
            obj.updateSfDisplay();
            obj.drawCar();
        end
        
        function set.contextImageDisplayProjectionRange(obj,v)
            v = max(v,0);
            obj.contextImageDisplayProjectionRange = v;
            obj.updateSfDisplay();
            obj.drawCar();
        end
        
        function set.contextImageDisplaySideProjectionDim(obj,v)
            obj.contextImageDisplaySideProjectionDim = v;
            obj.updateSideProjection();
        end
    end
    
    %% gui functions
    methods
        function closeDisp(obj,~,~)
            obj.enableDisplay = false;
        end
        
        function copySiImage(obj,varargin)
            if isempty(obj.hSI.hDisplay.lastAcqStripeDataBuffer)
                srcVar = 'rollingStripeDataBuffer';
            else
                srcVar = 'lastAcqStripeDataBuffer';
            end
            
            zs = [];
            rois = {};
            imgs = {};
            surfs = {};
            
            rg = obj.hSI.hRoiManager.currentRoiGroup;
            for r = rg.rois
                if r.discretePlaneMode && numel(r.zs) > 1
                    warndlg('All ROIs must be uniform in Z.');
                    most.idioms.warn('All ROIs must be uniform in Z.');
                    return;
                end
                rois{end+1} = r.get(0).cornerpoints();
            end
            
            % determine where all the image surfs need to be
            for i = 1:numel(obj.hSI.hDisplay.(srcVar))
                sd = obj.hSI.hDisplay.(srcVar){i};
                if iscell(sd)
                    sd = sd{1};
                end
                
                if ~isempty(sd.roiData)
                    zs = [zs sd.roiData{1}.zs];
                    zImgs = {};
                    chans = sd.channelNumbers;
                    
                    for j = 1:numel(sd.roiData)
                        rd = sd.roiData{j};
                        roiImgs = {};
                        for k = 1:numel(chans)
                            roiImgs{end+1} = rd.imageData{k}{1}./obj.hSI.hDisplay.displayRollingAverageFactor;
                        end
                        zImgs{end+1} = roiImgs;
                    end
                    
                    imgs{end+1} = zImgs;
                else
                    return;
                end
            end
            
            lut = obj.hSI.hChannels.channelLUT(chans);
            
            for i = 1:numel(rois)
                xx = [rois{i}(1:2,1) rois{i}([4 3],1)];
                yy = [rois{i}(1:2,2) rois{i}([4 3],2)];
                surfs{i} = surface(xx,yy,-1*ones(2),'Parent',obj.hFovAxes,'Hittest','off','linewidth',1,'EdgeColor','b',...
                    'FaceColor','texturemap','CData',zeros(2,2,3,'uint8'),'FaceAlpha','texturemap','AlphaData',0);
            end
            
            delete(obj.contextImageSurfs);
            
            obj.contextImageZs = zs;
            obj.contextImageRois = rois;
            obj.contextImageCDatas = imgs;
            obj.contextImageChans = chans;
            obj.contextImageSurfs = [surfs{:}];
            obj.contextImageLuts = lut;
            
            obj.contextImageLut = obj.contextImageLut;
            obj.updateSideProjection();
            if ~ismember(obj.contextImageChan, chans)
                obj.contextImageChan = chans(1);
            else
                obj.updateSfDisplay();
            end
        end
        
        function loadTiff(obj,varargin)
            [filename,pathname] = uigetfile('.tif','Choose file to load image from');
            if filename==0;return;end
            fn = fullfile(pathname,filename);
            
            try
                obj.hMainFig.Pointer = 'watch';
                drawnow();
                [roiData, rg, header] = scanimage.util.getMroiDataFromTiff(fn);
                
                zs = header.SI.hStackManager.zs;
                chans = roiData{1}.channels;
                imgs = {};
                rois = {};
                surfs = {};
                
                for r = rg.rois
                    if r.discretePlaneMode && numel(r.zs) > 1
                        warndlg('All ROIs must be uniform in Z.');
                        most.idioms.warn('All ROIs must be uniform in Z.');
                        return;
                    end
                    rois{end+1} = r.get(0).cornerpoints();
                end
                
                % determine where all the image surfs need to be
                for slcIdx = 1:numel(zs)
                    z = zs(slcIdx);
                    zImgs = {};
                    
                    for roiIdx = 1:numel(roiData)
                        [tf,roiZIdx] = ismember(z, roiData{roiIdx}.zs);
                        if tf
                            roiImgs = {};
                            %get the images
                            for chIdx = 1:numel(chans)
                                roiImgs{end+1} = roiData{roiIdx}.imageData{chIdx}{end}{roiZIdx}';
                            end
                            
                            zImgs{end+1} = roiImgs;
                        end
                    end
                    imgs{end+1} = zImgs;
                end
                
                for i = 1:numel(rois)
                    xx = [rois{i}(1:2,1) rois{i}([4 3],1)];
                    yy = [rois{i}(1:2,2) rois{i}([4 3],2)];
                    surfs{i} = surface(xx,yy,-1*ones(2),'Parent',obj.hFovAxes,'Hittest','off','linewidth',1,'userdata',[],...
                        'FaceColor','texturemap','CData',zeros(2,2,3,'uint8'),'AlphaData',1,'EdgeColor','b','visible','off','FaceAlpha','texturemap');
                    
                end
                
                luts = header.SI.hChannels.channelLUT(chans);
                
                delete(obj.contextImageSurfs);
                
                obj.contextImageZs = zs;
                obj.contextImageRois = rois;
                obj.contextImageCDatas = imgs;
                obj.contextImageChans = chans;
                obj.contextImageSurfs = [surfs{:}];
                obj.contextImageLuts = luts;
                
                obj.updateSideProjection();
                if ~ismember(obj.contextImageChan, chans)
                    obj.contextImageChan = chans(1);
                else
                    obj.updateSfDisplay();
                end
                
                obj.hMainFig.Pointer = 'arrow';
            catch ME
                obj.hMainFig.Pointer = 'arrow';
                ME.rethrow;
            end
        end
        
        function updateSfDisplay(obj)
            zrg = obj.contextImageDisplayZ + obj.contextImageDisplayProjectionRange * [-.5 .5];
            zIs = find(obj.contextImageZs >= zrg(1) & obj.contextImageZs <= zrg(2));
            projZs = obj.contextImageZs(zIs);
            
            [tf, chanIdx] = ismember(obj.contextImageChan,obj.contextImageChans);
            
            if isempty(projZs) || ~tf
                % no image data captured in this projection
                set(obj.contextImageSurfs, 'visible', 'off');
            else
                for i = 1:numel(obj.contextImageRois)
                    cd = obj.contextImageCDatas{zIs(1)}{i}{chanIdx};
                    for zi = 2:numel(zIs)
                        cd = max(cd,obj.contextImageCDatas{zIs(zi)}{i}{chanIdx});
                    end
                    
                    [cd, adata] = obj.scaleAndColorCData(cd,'gray',obj.contextImageLuts{chanIdx});
                    set(obj.contextImageSurfs(i), 'visible', 'on', 'CData', cd, 'alphadata',adata);
                end
            end
        end
        
        function [cData, aData] = scaleAndColorCData(obj,data,clr,lut)
            lut = single(lut);
            maxVal = single(255);
            scaledData = uint8((single(data) - lut(1)) .* (maxVal / (lut(2)-lut(1))));
            
            switch lower(clr)
                case 'red'
                    cData = zeros([size(scaledData) 3],'uint8');
                    cData(:,:,1) = scaledData;
                case 'green'
                    cData = zeros([size(scaledData) 3],'uint8');
                    cData(:,:,2) = scaledData;
                case 'blue'
                    cData = zeros([size(scaledData) 2],'uint8');
                    cData(:,:,3) = scaledData;
                case 'gray'
                    cData(:,:,:) = repmat(scaledData,[1 1 3]);
                case 'none'
                    cData = zeros([size(scaledData) 3]);
                otherwise
                    assert(false);
            end
            
            if obj.contextImageTransparency
                aData = double(scaledData > 0);
            else
                aData = 1;
            end
        end
        
        function autoContextImageContrast(obj,varargin)
            zrg = obj.contextImageDisplayZ + obj.contextImageDisplayProjectionRange * [-.5 .5];
            zIs = find(obj.contextImageZs >= zrg(1) & obj.contextImageZs <= zrg(2));
            projZs = obj.contextImageZs(zIs);
            
            [tf, chanIdx] = ismember(obj.contextImageChan,obj.contextImageChans);
            
            pixels = [];
            if ~isempty(projZs) && tf
                for i = 1:numel(obj.contextImageRois)
                    cd = obj.contextImageCDatas{zIs(1)}{i}{chanIdx};
                    for zi = 2:numel(zIs)
                        cd = max(cd,obj.contextImageCDatas{zIs(zi)}{i}{chanIdx});
                    end
                    pixels = [pixels; cd(:)];
                end
            end
            
            if ~isempty(pixels)
                pixels = sort(pixels);
                N = numel(pixels);
                iblk = ceil(N*obj.autoScaleSaturationFraction(1));
                iwht = ceil(N*(1-obj.autoScaleSaturationFraction(2)));
                
                obj.contextImageLut = round([pixels(iblk) pixels(iwht)]);
            end
        end
        
        function updateGProp(obj,name,val)
            obj.(name) = val;
        end
        
        function updateProp(obj,name,val)
            obj.hSLAPMi.(name) = val;
        end
        
        function updateStatus(obj)
            if most.idioms.isValidObj(obj.hSLAPMi)
                set(obj.etStatus,'string',obj.hSLAPMi.status);
                
                switch(obj.hSLAPMi.status)
                    case 'Idle'
                        stop(obj.hDisplayRefreshTimer);
                        inactives = [obj.pbArm obj.pbTrig obj.pbAbort obj.pbEnd];
                        actives = obj.pbInit;
                        
                    case 'Initialized'
                        stop(obj.hDisplayRefreshTimer);
                        inactives = [obj.pbInit obj.pbTrig obj.pbAbort];
                        actives = [obj.pbArm obj.pbEnd];
                        
                    case 'Armed'
                        stop(obj.hDisplayRefreshTimer);
                        inactives = [obj.pbInit obj.pbArm obj.pbAbort];
                        actives = [obj.pbTrig obj.pbEnd];
                        
                    case {'Acquiring Data' 'Finishing data logging...'}
                        inactives = [obj.pbInit obj.pbArm obj.pbTrig];
                        actives = [obj.pbAbort obj.pbEnd];
                        if strcmp(obj.hDisplayRefreshTimer.Running, 'off')
                            start(obj.hDisplayRefreshTimer);
                        end
                    otherwise
                        stop(obj.hDisplayRefreshTimer);
                        inactives = [obj.pbArm obj.pbTrig obj.pbAbort obj.pbEnd obj.pbInit];
                        actives = [];
                end
                
                set(inactives, 'Enable', 'Off');
                set(actives, 'Enable', 'On');
            end
        end
        
        function manipProj(obj,pts,stopping)
            if nargin < 3
                starting = true;
            else
                starting = false;
            end
            
            persistent prevpt;
            
            if starting
                if strcmp(get(obj.hMainFig,'SelectionType'), 'normal')
                    % left click
                    prevpt = getProjPt();
                    
                    set(obj.hMainFig,'WindowButtonMotionFcn',@(varargin)obj.manipProj(pts,false),'WindowButtonUpFcn',@(varargin)obj.manipProj(pts,true));
                    waitfor(obj.hMainFig,'WindowButtonMotionFcn',[]);
                end
            else
                nwpt = getProjPt();
                mv = nwpt(2) - prevpt(2);
                
                if all(pts)
                    obj.contextImageDisplayZ = obj.contextImageDisplayZ + mv;
                else
                    if pts(1)
                        mv = -mv;
                    end
                    p = obj.contextImageDisplayProjectionRange;
                    n = p + mv;
                    obj.contextImageDisplayProjectionRange = n;
                    
                    mv = p - obj.contextImageDisplayProjectionRange;
                    if pts(2)
                        mv = -mv;
                    end
                    obj.contextImageDisplayZ = obj.contextImageDisplayZ + mv/2;
                end
                
                if stopping
                    set(obj.hMainFig,'WindowButtonMotionFcn',[],'WindowButtonUpFcn',[]);
                else
                    prevpt = nwpt;
                end
            end
            
            function p = getProjPt()
                p = get(obj.hProjAxes,'CurrentPoint');
                p = p([1 3]);
            end
        end
        
        function updateSideProjection(obj)
            if numel(obj.contextImageZs)
                obj.zmin = min(obj.contextImageZs);
                obj.zmax = max(obj.contextImageZs);
                obj.slices = numel(obj.contextImageZs);
            else
                obj.zmin = [];
                obj.zmax = [];
                obj.slices = [];
            end
            
            % figure out z limits
            zspc = inf;
            if isempty(obj.contextImageZs)
                rg = [-1 1];
            elseif numel(obj.contextImageZs) < 2
                rg = obj.contextImageZs + [-1 1];
            else
                zspc = mean(obj.contextImageZs(2:end)-obj.contextImageZs(1:end-1));
                rg = [min(obj.contextImageZs) max(obj.contextImageZs)] + [-zspc zspc]/2;
            end
            obj.hProjAxes.YLim = rg;
            
            prg = obj.contextImageDisplayZ + obj.contextImageDisplayProjectionRange * [-.5 .5];
            prg = min(max(prg,rg(1)),rg(2));
            obj.contextImageDisplayZ = mean(prg);
            obj.contextImageDisplayProjectionRange = diff(prg);
            
            % figure out xy limits
            dm = obj.contextImageDisplaySideProjectionDim;
            rois = obj.contextImageRois;
            minx = inf;
            maxx = -inf;
            for i = numel(rois):-1:1
                minx = min([minx;rois{i}(:,dm)]);
                maxx = max([maxx;rois{i}(:,dm)]);
                xx{i} = repmat([rois{i}(1,dm) rois{i}(3,dm)],2,1);
            end
            
            if isinf(minx)
                xl = [0 1];
            else
                xl = [minx maxx];
            end
            m = xl(1) + diff(xl)/2;
            obj.hProjAxes.XLim = xl;
            obj.hProjCar.XData = [xl(1) xl(2); xl(1) xl(2);];
            obj.hProjTop.XData = m;
            obj.hProjBot.XData = m;
            
            
            delete(obj.contextImageProjSurfs);
            obj.contextImageProjSurfs = [];
            % create surfs
            [tf, chanIdx] = ismember(obj.contextImageChan,obj.contextImageChans);
            if tf
                slcSz = min(diff(rg)/20,zspc);
                surfs = {};
                for j = 1:numel(obj.contextImageZs)
                    z = obj.contextImageZs(j);
                    yy = (z-slcSz/2)*[1 1; 0 0] + (z+slcSz/2)*[0 0; 1 1];
                    
                    for i = 1:numel(rois)
                        if obj.contextImageDisplaySideProjectionDim > 1
                            cd = max(obj.contextImageCDatas{j}{i}{chanIdx},[],1);
                        else
                            cd = max(obj.contextImageCDatas{j}{i}{chanIdx},[],2)';
                        end
                        [cd, ~] = obj.scaleAndColorCData(cd,'gray',obj.contextImageLuts{chanIdx});
                        surfs{end+1} = surface(xx{i},yy,zeros(2),'Parent',obj.hProjAxes,'Hittest','off','linewidth',1,'EdgeColor','b','FaceColor','texturemap','CData',cd);
                    end
                end
                obj.contextImageProjSurfs = [surfs{:}];
            end
            
            obj.drawCar();
        end
        
        function drawCar(obj)
            rg = diff(obj.hProjAxes.YLim);
            zrg = obj.contextImageDisplayZ + obj.contextImageDisplayProjectionRange * [-.5 .5];
            
            
            obj.hProjCar.YData = [zrg(1) zrg(1); zrg(2) zrg(2)];
            obj.hProjTop.YData = zrg(1)-rg*.02;
            obj.hProjBot.YData = zrg(2)+rg*.02;
        end
        
        function sfCpFunc(obj,stopping)
            if nargin < 2
                starting = true;
            else
                starting = false;
            end
            
            persistent prevpt;
            persistent prevpos;
            
            if starting
                if strcmp(get(obj.hMainFig,'SelectionType'), 'normal')
                    % left click
                    prevpt = getFovPt();
                    prevpos = obj.hSLAPMi.scanCenterPoint;
                    
                    set(obj.hMainFig,'WindowButtonMotionFcn',@(varargin)obj.sfCpFunc(false),'WindowButtonUpFcn',@(varargin)obj.sfCpFunc(true));
                    waitfor(obj.hMainFig,'WindowButtonMotionFcn',[]);
                end
            else
                nwpt = getFovPt();
                mv = nwpt - prevpt;
                
                prevpos = prevpos + mv;
                
                minmx = (obj.displayAngularRange - (obj.hSLAPMi.scanLineLength * (1:2^.5) * obj.hSLAPMi.tiling)) / 2;
                obj.hSLAPMi.scanCenterPoint = min(max(prevpos, -minmx), minmx);
                
                if stopping
                    set(obj.hMainFig,'WindowButtonMotionFcn',[],'WindowButtonUpFcn',[]);
                else
                    prevpt = nwpt;
                end
            end
            
            function p = getFovPt()
                p = get(obj.hFovAxes,'CurrentPoint');
                p = p([1 3]);
            end
        end
        
        function updateRect(obj,varargin)
            xs = [-.5 .5 .5+2^-.5 .5+2^-.5 .5 -.5 -(.5+2^-.5) -(.5+2^-.5)]*obj.hSLAPMi.scanLineLength*obj.hSLAPMi.tiling / (1+2^.5);
            ys = [-(.5+2^-.5) -(.5+2^-.5) -.5 .5 .5+2^-.5 .5+2^-.5 .5 -.5]*obj.hSLAPMi.scanLineLength*obj.hSLAPMi.tiling / (1+2^.5);
            set(obj.hSfSurf,'XData',obj.hSLAPMi.scanCenterPoint(1) + xs,'YData',obj.hSLAPMi.scanCenterPoint(2) + ys);
        end
        
        function pbRestoreFpgaCb(obj,varargin)
            obj.hMainFig.Pointer = 'watch';
            drawnow();
            try
                obj.hSLAPMi.restoreSiFpga();
                obj.hMainFig.Pointer = 'arrow';
                scanimage
            catch ME
                obj.hMainFig.Pointer = 'arrow';
                ME.rethrow();
            end
        end
        
        function updateFpgaButton(obj,varargin)
            obj.pbRestoreFpga.Enable = obj.tfMap(obj.hSLAPMi.shareSiFpga && ~obj.hSLAPMi.siFpgaRunning);
        end
        
        function updateDisplay(obj)            
            if obj.enableDisplay
                latestFrame = obj.hSLAPMi.latestFrame;
                latestFrameTag = obj.hSLAPMi.latestFrameTag;
                
                if ~obj.hSLAPMi.dispCorrupt && ~isempty(latestFrameTag) && ~isempty(latestFrame)...
                        && (latestFrameTag.totalSamples == latestFrameTag.laserClcks * latestFrameTag.sampsPerClk * .5)
                    
                    %frameData = SLAPMi.unpackFrame(latestFrame(obj.decimationMap(obj.decimationMap<=length(latestFrame)))); %#ok<*PROP>  %(1:obj.dataDecimation:end)
                    frameData = SLAPMi.unpackFrame(latestFrame); %#ok<*PROP>  unpackframe for full frame takes ~2ms, half of total screen update time
                    
                    F = zeros(obj.hSLAPMi.samplesExpected*2,1); %F takes the frameData to the correct size
                    F(1:min(length(frameData),end)) = frameData(1:min(length(F),end),2); %second PMT
                    
                    frame = mean(F(obj.frameDataMap),1);
                    lineN = length(frame);
                    
                        No = size(obj.displayData{1}.vals);
                        if No(2) ~= lineN
                            %frame size changed. clear
                            disp(['Clearing Display! ' num2str(No(2)) ' ' num2str(lineN)])
                            obj.displayData{1}.vals = nan(obj.displayFrameHistoryLength,lineN);
                            obj.displayData{1}.vals(end,:) = frame;  %obj.frameData(round((line_ix-1)*(N/4)) + (1:lineN),1);
                            obj.displayData{1}.frames = zeros(obj.displayFrameHistoryLength,1);
                            obj.displayData{1}.frames(end) = latestFrameTag.frameNumber;
                        else
                            obj.displayData{1}.vals(1:end-1,:) = obj.displayData{1}.vals(2:end,:);
                            obj.displayData{1}.vals(end,:) = frame;
                            obj.displayData{1}.frames(1:end-1) = obj.displayData{1}.frames(2:end);
                            obj.displayData{1}.frames(end) = latestFrameTag.frameNumber;
                        end
                    obj.redrawDisplay(); %redrawdisplay takes roughyl 10ms, 1/4 of total screen update time
                end
            end
        end
        
        function redrawDisplay(obj)
            for i = 1
                if isempty(obj.displayData{i}.vals)
                    cdata = zeros(2,2,1,'uint8');
                else
                    cdata = (obj.displayData{i}.vals - obj.lut(1)) / (obj.lut(2) - obj.lut(1));
                    cdata = uint8(255 * min(max(0,cdata),1));
                end
                set(obj.hDispSurfs{i}, 'cdata', repmat(cdata,1,1,3));
            end
        end
        
        function raise(obj)
            figure(obj.hMainFig);
            if obj.enableDisplay
                figure(obj.hDispFig);
            end
        end
        
        function updateDo3D(obj, val)
           if nargin>1
               if val && ~obj.hSLAPMi.do3D
                   obj.hSLAPMi.do3D = val;
                   obj.hSLAPMi.volumePeriod = 1/20;
               else
                   obj.hSLAPMi.do3D = val;
               end
           end
           SLAPmi_timing(obj.hSLAPMi);
           if  obj.hSLAPMi.do3D
               set([obj.etVolRate; obj.pbZmin; obj.pbZmax; obj.etZmin; obj.etZmax; obj.cbBiDi], 'enable', 'on');
               obj.updatePiezo;
           else
               set([obj.etVolRate; obj.pbZmin; obj.pbZmax; obj.etZmin; obj.etZmax; obj.cbBiDi], 'enable', 'off');
           end
        end
        
        function updateLogAIs(obj, val)
            obj.hSLAPMi.logAIs = false(1,length(obj.cbLogAIs));
            for ai = 1:length(obj.cbLogAIs)
                obj.hSLAPMi.logAIs(ai) = get(obj.cbLogAIs{ai}, 'Value');
            end
        end
        
        function updatePiezo(obj)
            Zlow = str2double(get(obj.etZmin,'string'));
            Zhi = str2double(get(obj.etZmax,'string'));
            
            obj.hSLAPMi.volumePeriod = max(0.003, 1/str2double(get(obj.etVolRate,'string')));
            obj.updateProp('Zmin', min(400, max(0,Zlow)));
            obj.updateProp('Zmax', min(400, max(0,Zhi)));
            
            obj.hSLAPMi.piezoWaveform = [];
        end
        
        function updateAperture(obj, value)
            %update the scan length (offset?)
            value= max(0, min(1, value));
            obj.hSLAPMi.aperture = value;
        end
        
        function updateLut(obj, varargin)
            obj.lutBlack = round(min(obj.lutBlack, obj.lutWhite));
            obj.lutWhite = round(max(obj.lutBlack+1, obj.lutWhite));
            obj.lut = [obj.lutBlack obj.lutWhite];
        end
        
        function autoLut(obj, varargin)
            pixels = obj.displayData{1}.vals(:);
            pixels = pixels(~isnan(pixels));
            if ~isempty(pixels)
                pixels = sort(pixels);
                N = numel(pixels);
                iblk = ceil(N* 0.02);
                iwht = ceil(N*0.98);
                obj.lutBlack = pixels(iblk);
                obj.lutWhite = pixels(iwht);
                obj.lut = [obj.lutBlack obj.lutWhite];
            end
        end
        
        function triggerStim (obj, varargin)
            %trigger a stimulus manually
            obj.hSLAPMi.hTaskTriggerOutOnDmd = most.util.safeCreateTask('TriggerOutOnDemand');
            obj.hSLAPMi.hTaskTriggerOutOnDmd.createDOChan(obj.hSLAPMi.beamDaqName, 'PFI0' , 'TriggerOutOnDmd');
            obj.hSLAPMi.hTaskTriggerOutOnDmd.writeDigitalData(false, 1, true);
            obj.hSLAPMi.hTaskTriggerOutOnDmd.writeDigitalData(true, 1, true);
            disp(['Stimulus triggered at ' datestr(now)])
            obj.hSLAPMi.hTaskTriggerOutOnDmd.writeDigitalData(false, 1, true); %turn off beam
            delete(obj.hSLAPMi.hTaskTriggerOutOnDmd);
        end
            
    end
end

